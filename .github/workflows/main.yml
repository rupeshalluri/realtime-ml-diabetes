name: ML Pipeline CI/CD

on:
  push:
    branches: [ main ]
    
env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install databricks-cli azureml-core
        pip install opencv-python
        pip install mlflow==2.19.0
        pip install cloudpickle==2.2.1
        pip install torch
        pip install clip-interrogator
        pip install scikit-build
        

        #pip install --no-cache-dir -r ./docker/requirements.txt
    - name: Configure Databricks CLI
      run: |
        databricks configure --token <<EOF
        ${{ secrets.DATABRICKS_HOST }}
        ${{ secrets.DATABRICKS_TOKEN }}
        EOF
    - name: Download ML Model
      run: |
       cd databricks
       python download_model.py
    
    - name: Run Databricks Job
      id: databricks_job
      run: |
        run_id=$(databricks jobs run-now --job-id ${{ secrets.DATABRICKS_JOB_ID }} | jq -r '.run_id')
        echo "Job triggered with run_id: $run_id"
        echo "::set-output name=run_id::$run_id"
    - name: Wait for Databricks Job to Complete
      run: |
        run_id=${{ steps.databricks_job.outputs.run_id }}
        echo "Waiting for job to complete..."
        
        while true; do
          status=$(databricks runs get --run-id $run_id | jq -r '.state.life_cycle_state')
          result=$(databricks runs get --run-id $run_id | jq -r '.state.result_state')
          echo "Status: $status - Result: $result"
          if [[ "$status" == "TERMINATED" ]]; then
            if [[ "$result" == "SUCCESS" ]]; then
              echo "Job completed successfully."
              break
            else
              echo "Job failed or was cancelled."
              exit 1
            fi
          fi
          echo "Job still running...checking again in 30 seconds."
          sleep 30
        done

        
