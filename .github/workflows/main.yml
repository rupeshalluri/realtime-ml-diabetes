name: ML Pipeline CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install databricks-cli azureml-core opencv-python

    - name: Install jq and grep (for parsing)
      run: sudo apt-get update && sudo apt-get install -y jq grep

    - name: Configure Databricks CLI
      run: |
        mkdir -p ~/.databricks
        cat <<EOF > ~/.databricks/config
        [DEFAULT]
        host = ${{ secrets.DATABRICKS_HOST }}
        token = ${{ secrets.DATABRICKS_TOKEN }}
        EOF

    - name: Run and Wait for Databricks Job (old CLI)
      run: |
        echo "Triggering Databricks job..."
        RUN_OUTPUT=$(databricks jobs run-now --job-id ${{ secrets.DATABRICKS_JOB_ID }})
        echo "$RUN_OUTPUT"

        RUN_ID=$(echo "$RUN_OUTPUT" | grep -oP '"run_id":\s*\K[0-9]+')

        if [ -z "$RUN_ID" ]; then
          echo "Failed to retrieve run_id from Databricks."
          exit 1
        fi

        echo "Waiting for Databricks job (run_id=$RUN_ID) to complete..."

        while true; do
          STATUS=$(databricks runs get --run-id $RUN_ID)
          LIFE_CYCLE_STATE=$(echo "$STATUS" | grep -oP '"life_cycle_state":\s*"\K[^"]+')
          RESULT_STATE=$(echo "$STATUS" | grep -oP '"result_state":\s*"\K[^"]+')

          echo "Status: $LIFE_CYCLE_STATE, Result: $RESULT_STATE"

          if [[ "$LIFE_CYCLE_STATE" == "TERMINATED" ]]; then
            if [[ "$RESULT_STATE" == "SUCCESS" ]]; then
              echo "Databricks job completed successfully."
              break
            else
              echo "Databricks job failed with result: $RESULT_STATE"
              exit 1
            fi
          fi

          sleep 20
        done

    - name: Build and Push Docker Image
      run: |
        docker login testpractce123.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
        docker build -t testpractce123.azurecr.io/diabetes-model:latest ./docker
        docker push testpractce123.azurecr.io/diabetes-model:latest

    - name: Deploy to AKS
      run: |
        az aks get-credentials --resource-group <your-resource-group> --name <your-aks-cluster>
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
