name: ML Pipeline CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install databricks-cli azureml-core opencv-python

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Configure Databricks CLI
      run: |
        mkdir -p ~/.databricks
        echo "[DEFAULT]" > ~/.databricks/config
        echo "host = ${{ secrets.DATABRICKS_HOST }}" >> ~/.databricks/config
        echo "token = ${{ secrets.DATABRICKS_TOKEN }}" >> ~/.databricks/config

    - name: Run and Monitor Databricks Job
      run: |
        RUN_OUTPUT=$(databricks jobs run-now --job-id ${{ secrets.DATABRICKS_JOB_ID }} --json)
        RUN_ID=$(echo $RUN_OUTPUT | jq -r '.run_id')
        
        echo "Triggered Databricks Job Run ID: $RUN_ID"
        
        while true; do
          STATUS=$(databricks runs get --run-id $RUN_ID --output)
          LIFE_CYCLE_STATE=$(echo $STATUS | jq -r '.state.life_cycle_state')
          RESULT_STATE=$(echo $STATUS | jq -r '.state.result_state')
          
          echo "Job status: $LIFE_CYCLE_STATE, Result: $RESULT_STATE"
          
          if [[ "$LIFE_CYCLE_STATE" == "TERMINATED" || "$LIFE_CYCLE_STATE" == "SKIPPED" || "$LIFE_CYCLE_STATE" == "INTERNAL_ERROR" ]]; then
            if [[ "$RESULT_STATE" == "SUCCESS" ]]; then
              echo "Databricks job completed successfully."
              break
            else
              echo "Databricks job failed with result: $RESULT_STATE"
              exit 1
            fi
          fi
          
          echo "Waiting for job to complete..."
          sleep 30
        done

    - name: Build and Push Docker Image
      run: |
        docker login testpractce123.azurecr.io -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
        docker build -t testpractce123.azurecr.io/diabetes-model:latest ./docker
        docker push testpractce123.azurecr.io/diabetes-model:latest

    - name: Deploy to AKS
      run: |
        az aks get-credentials --resource-group <your-resource-group> --name <your-aks-cluster>
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
